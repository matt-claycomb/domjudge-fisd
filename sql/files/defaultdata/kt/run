#!/bin/sh

# Java compile wrapper-script for 'compile.sh'.
# See that script for syntax and more info.
#
# This script byte-compiles with the kotlinc compiler and
# generates a shell script to run it with the java interpreter with Kotlin
# libraries later.
#
# NOTICE: this compiler script cannot be used with the USE_CHROOT
# configuration option turned on, unless proper preconfiguration of
# the chroot environment has been taken care of!

DEST="$1" ; shift
MEMLIMIT="$1" ; shift
MAINSOURCE="$1"
MAINCLASS=""

# Amount of memory reserved for the Java virtual machine in kB. The
# default below is just above the maximum memory usage of current
# versions of the jvm, but might need increasing in some cases.
MEMRESERVED=350000

TMPFILE=$(mktemp --tmpdir domjudge_javac_output.XXXXXX) || exit 1

# Byte-compile:
kotlinc "$@"
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Look for class that has the 'main' function:
CLASSNAMES="$(find ./* -type f -regex '^.*\.class$' \
            | sed -e 's/\.class$//' -e 's/^\.\///' -e 's/\//./g')"
COMPILESCRIPTDIR="$(dirname "$0")"
MAINCLASS=$(java -cp "$COMPILESCRIPTDIR" DetectMain "$(pwd)" $CLASSNAMES)
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Calculate Java program memlimit as MEMLIMIT - max. JVM memory usage:
MEMLIMITJAVA=$((MEMLIMIT - MEMRESERVED))

# Write executing script:
# Executes java byte-code interpreter with following options
# -JXmx: maximum size of memory allocation pool
# -JXms: initial size of memory, improves runtime stability
# -JXX:+UseSerialGC: Serialized garbage collector improves runtime stability
# -JXss64m: 64MB stack size
cat > "$DEST" <<EOF
#!/bin/sh
# Generated shell-script to execute java interpreter on source.

# Detect dirname and change dir to prevent class not found errors.
if [ "\${0%/*}" != "\$0" ]; then
	cd "\${0%/*}"
fi

exec kotlin -J-XX:+UseSerialGC -J-Xss64m -J-Xms${MEMLIMITJAVA}k -J-Xmx${MEMLIMITJAVA}k -J-DONLINE_JUDGE=1 -J-DDOMJUDGE=1 '$MAINCLASS' "\$@"
EOF

chmod a+x "$DEST"

exit 0
